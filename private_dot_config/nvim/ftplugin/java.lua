-- local capabilities = require('cmp_nvim_lsp')
--     .default_capabilities(vim.lsp.protocol.make_client_capabilities())
-- local code_actions_keymap = require("daniel.lsp-keymaps").code_actions_keymap
--
--
-- local project_name = vim.fn.getcwd():gsub("/", "-"):gsub("[.]", ""):sub(2,-1)
--
-- local workspace_dir = '/home/daniel/.jdtls-workspaces/' .. project_name
--
-- local config = {
--     capabilities = capabilities,
--     -- The command that starts the language server
--     -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
--     cmd = {
--
--         -- ðŸ’€
--         '/usr/lib/jvm/java-17-openjdk/bin/java', -- or '/path/to/java17_or_newer/bin/java'
--         -- depends on if `java` is in your $PATH env variable and if it points to the right version.
--
--         '-Declipse.application=org.eclipse.jdt.ls.core.id1',
--         '-Dosgi.bundles.defaultStartLevel=4',
--         '-Declipse.product=org.eclipse.jdt.ls.core.product',
--         '-Dlog.protocol=true',
--         '-Dlog.level=ALL',
--         '-Xms1g',
--         '--add-modules=ALL-SYSTEM',
--         '--add-modules=jdk.incubator.foreign',
--         '--add-opens', 'java.base/java.util=ALL-UNNAMED',
--         '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
--
--         -- ðŸ’€
--         -- '-jar', '/path/to/jdtls_install_location/plugins/org.eclipse.equinox.launcher_VERSION_NUMBER.jar',
--         '-jar',
--         '/home/daniel/.local/share/nvim/mason/packages/jdtls/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar',
--         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
--         -- Must point to the                                                     Change this to
--         -- eclipse.jdt.ls installation                                           the actual version
--
--
--         -- ðŸ’€
--         '-configuration',
--         '/home/daniel/.local/share/nvim/mason/packages/jdtls/config_linux',
--         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^
--         -- Must point to the                      Change to one of `linux`, `win` or `mac`
--         -- eclipse.jdt.ls installation            Depending on your system.
--
--         -- ðŸ’€
--         -- See `data directory configuration` section in the README
--         '-data', workspace_dir
--     },
--
--
--     -- ðŸ’€
--     -- This is the default if not provided, you can remove it. Or adjust as needed.
--     -- One dedicated LSP server & client will be started per unique root_dir
--     root_dir = require('jdtls.setup').find_root({ '.git', 'mvnw', 'gradlew' }),
--
--     -- Here you can configure eclipse.jdt.ls specific settings
--     -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--     -- for a list of options
--     settings = {
--         java = {
--             configuration = {
--                 -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--                 -- And search for `interface RuntimeOption`
--                 -- The `name` is NOT arbitrary, but must match one of the elements from `enum ExecutionEnvironment` in the link above
--                 runtimes = {
--                     {
--                         name = "JavaSE-11",
--                         path = "/usr/lib/jvm/java-11-openjdk/",
--                     },
--                     {
--                         name = "JavaSE-17",
--                         path = "/usr/lib/jvm/java-17-openjdk/",
--                     },
--                 },
--
--             }
--         }
--     },
--
--     -- Language server `initializationOptions`
--     -- You need to extend the `bundles` with paths to jar files
--     -- if you want to use additional eclipse.jdt.ls plugins.
--     --
--     -- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation
--     --
--     -- If you don't plan on using the debugger or other eclipse.jdt.ls plugins you can remove this
--     init_options = {},
-- }
--
-- local bundles = {
--     vim.fn.glob("~/.local/share/nvim/mason/packages/java-debug-adapter/extension/server/com.microsoft.java.debug.plugin-0.42.0.jar"
--         , 1),
-- }
--
-- vim.lsp.set_log_level("DEBUG")
--
-- vim.list_extend(bundles,
--     vim.split(vim.fn.glob("~/.local/share/nvim/mason/packages/java-test/extension/server/com.microsoft.java.test.plugin-0.37.1.jar"
--         , 1), "\n"))
-- config['init_options'] = {
--      bundles = bundles;
-- }
--
-- config['on_attach'] = function(client, bufnr)
--     -- With `hotcodereplace = 'auto' the debug adapter will try to apply code changes
--     -- you make during a debug session immediately.
--     -- Remove the option if you do not want that.
--     -- You can use the `JdtHotcodeReplace` command to trigger it manually
--     code_actions_keymap()
--     require("jdtls.setup").add_commands()
--     require 'jdtls'.setup_dap()
--     require("lsp-status").register_progress()
--     local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
--
--     buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
--     vim.api.nvim_exec([[
--           hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow
--           hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow
--           hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow
--           augroup lsp_document_highlight
--             autocmd!
--             autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
--             autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
--           augroup END
--       ]], false)
--     -- require('jdtls').setup_dap({ hotcodereplace = 'auto' })
-- end
--
-- -- vim.api.nvim_exec([[ autocmd FileType java lua require'jdtls_setup'.setup() ]], false)
--
-- -- This starts a new client & server,
-- -- or attaches to an existing client & server depending on the `root_dir`.
-- require('jdtls').start_or_attach(config)
--
